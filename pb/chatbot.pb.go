// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.2
// source: chatbot.proto

package chatbot

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// ChatAppType - chat app type
type ChatAppType int32

const (
	ChatAppType_CAT_TELEGRAM ChatAppType = 0
	ChatAppType_CAT_COOLQ    ChatAppType = 1
)

// Enum value maps for ChatAppType.
var (
	ChatAppType_name = map[int32]string{
		0: "CAT_TELEGRAM",
		1: "CAT_COOLQ",
	}
	ChatAppType_value = map[string]int32{
		"CAT_TELEGRAM": 0,
		"CAT_COOLQ":    1,
	}
)

func (x ChatAppType) Enum() *ChatAppType {
	p := new(ChatAppType)
	*p = x
	return p
}

func (x ChatAppType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatAppType) Descriptor() protoreflect.EnumDescriptor {
	return file_chatbot_proto_enumTypes[0].Descriptor()
}

func (ChatAppType) Type() protoreflect.EnumType {
	return &file_chatbot_proto_enumTypes[0]
}

func (x ChatAppType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatAppType.Descriptor instead.
func (ChatAppType) EnumDescriptor() ([]byte, []int) {
	return file_chatbot_proto_rawDescGZIP(), []int{0}
}

// AppCtrlType - app control type
type AppCtrlType int32

const (
	AppCtrlType_ACT_JOINCHANNEL AppCtrlType = 0
)

// Enum value maps for AppCtrlType.
var (
	AppCtrlType_name = map[int32]string{
		0: "ACT_JOINCHANNEL",
	}
	AppCtrlType_value = map[string]int32{
		"ACT_JOINCHANNEL": 0,
	}
)

func (x AppCtrlType) Enum() *AppCtrlType {
	p := new(AppCtrlType)
	*p = x
	return p
}

func (x AppCtrlType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppCtrlType) Descriptor() protoreflect.EnumDescriptor {
	return file_chatbot_proto_enumTypes[1].Descriptor()
}

func (AppCtrlType) Type() protoreflect.EnumType {
	return &file_chatbot_proto_enumTypes[1]
}

func (x AppCtrlType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppCtrlType.Descriptor instead.
func (AppCtrlType) EnumDescriptor() ([]byte, []int) {
	return file_chatbot_proto_rawDescGZIP(), []int{1}
}

// UserAppInfo - user app info
type UserAppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App             ChatAppType `protobuf:"varint,1,opt,name=app,proto3,enum=chatbotpb.ChatAppType" json:"app,omitempty"`
	Appuid          string      `protobuf:"bytes,2,opt,name=appuid,proto3" json:"appuid,omitempty"`
	Appuname        string      `protobuf:"bytes,3,opt,name=appuname,proto3" json:"appuname,omitempty"`
	Chatnums        int32       `protobuf:"varint,4,opt,name=chatnums,proto3" json:"chatnums,omitempty"`
	UsernameAppServ string      `protobuf:"bytes,5,opt,name=usernameAppServ,proto3" json:"usernameAppServ,omitempty"`
	Lang            string      `protobuf:"bytes,6,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *UserAppInfo) Reset() {
	*x = UserAppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatbot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAppInfo) ProtoMessage() {}

func (x *UserAppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chatbot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAppInfo.ProtoReflect.Descriptor instead.
func (*UserAppInfo) Descriptor() ([]byte, []int) {
	return file_chatbot_proto_rawDescGZIP(), []int{0}
}

func (x *UserAppInfo) GetApp() ChatAppType {
	if x != nil {
		return x.App
	}
	return ChatAppType_CAT_TELEGRAM
}

func (x *UserAppInfo) GetAppuid() string {
	if x != nil {
		return x.Appuid
	}
	return ""
}

func (x *UserAppInfo) GetAppuname() string {
	if x != nil {
		return x.Appuname
	}
	return ""
}

func (x *UserAppInfo) GetChatnums() int32 {
	if x != nil {
		return x.Chatnums
	}
	return 0
}

func (x *UserAppInfo) GetUsernameAppServ() string {
	if x != nil {
		return x.UsernameAppServ
	}
	return ""
}

func (x *UserAppInfo) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

// UserInfo - user info
type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int64          `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name     string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Apps     []*UserAppInfo `protobuf:"bytes,3,rep,name=apps,proto3" json:"apps,omitempty"`
	Tags     []string       `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Language string         `protobuf:"bytes,5,opt,name=language,proto3" json:"language,omitempty"`
	Money    int64          `protobuf:"varint,10,opt,name=money,proto3" json:"money,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatbot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chatbot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_chatbot_proto_rawDescGZIP(), []int{1}
}

func (x *UserInfo) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfo) GetApps() []*UserAppInfo {
	if x != nil {
		return x.Apps
	}
	return nil
}

func (x *UserInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UserInfo) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *UserInfo) GetMoney() int64 {
	if x != nil {
		return x.Money
	}
	return 0
}

// AppGroupInfo - app group info
type AppGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App             ChatAppType `protobuf:"varint,1,opt,name=app,proto3,enum=chatbotpb.ChatAppType" json:"app,omitempty"`
	UsernameAppServ string      `protobuf:"bytes,2,opt,name=usernameAppServ,proto3" json:"usernameAppServ,omitempty"`
	Groupid         string      `protobuf:"bytes,3,opt,name=groupid,proto3" json:"groupid,omitempty"`
	Groupname       string      `protobuf:"bytes,4,opt,name=groupname,proto3" json:"groupname,omitempty"`
}

func (x *AppGroupInfo) Reset() {
	*x = AppGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatbot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppGroupInfo) ProtoMessage() {}

func (x *AppGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chatbot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppGroupInfo.ProtoReflect.Descriptor instead.
func (*AppGroupInfo) Descriptor() ([]byte, []int) {
	return file_chatbot_proto_rawDescGZIP(), []int{2}
}

func (x *AppGroupInfo) GetApp() ChatAppType {
	if x != nil {
		return x.App
	}
	return ChatAppType_CAT_TELEGRAM
}

func (x *AppGroupInfo) GetUsernameAppServ() string {
	if x != nil {
		return x.UsernameAppServ
	}
	return ""
}

func (x *AppGroupInfo) GetGroupid() string {
	if x != nil {
		return x.Groupid
	}
	return ""
}

func (x *AppGroupInfo) GetGroupname() string {
	if x != nil {
		return x.Groupname
	}
	return ""
}

// AppChannelInfo - app channel info
type AppChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App             ChatAppType `protobuf:"varint,1,opt,name=app,proto3,enum=chatbotpb.ChatAppType" json:"app,omitempty"`
	UsernameAppServ string      `protobuf:"bytes,2,opt,name=usernameAppServ,proto3" json:"usernameAppServ,omitempty"`
	Channelid       string      `protobuf:"bytes,3,opt,name=channelid,proto3" json:"channelid,omitempty"`
	Channelname     string      `protobuf:"bytes,4,opt,name=channelname,proto3" json:"channelname,omitempty"`
}

func (x *AppChannelInfo) Reset() {
	*x = AppChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatbot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppChannelInfo) ProtoMessage() {}

func (x *AppChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chatbot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppChannelInfo.ProtoReflect.Descriptor instead.
func (*AppChannelInfo) Descriptor() ([]byte, []int) {
	return file_chatbot_proto_rawDescGZIP(), []int{3}
}

func (x *AppChannelInfo) GetApp() ChatAppType {
	if x != nil {
		return x.App
	}
	return ChatAppType_CAT_TELEGRAM
}

func (x *AppChannelInfo) GetUsernameAppServ() string {
	if x != nil {
		return x.UsernameAppServ
	}
	return ""
}

func (x *AppChannelInfo) GetChannelid() string {
	if x != nil {
		return x.Channelid
	}
	return ""
}

func (x *AppChannelInfo) GetChannelname() string {
	if x != nil {
		return x.Channelname
	}
	return ""
}

// AppServInfo - app server info
type AppServInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string      `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	AppType   ChatAppType `protobuf:"varint,2,opt,name=appType,proto3,enum=chatbotpb.ChatAppType" json:"appType,omitempty"`
	Username  string      `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Sessionid string      `protobuf:"bytes,4,opt,name=sessionid,proto3" json:"sessionid,omitempty"`
}

func (x *AppServInfo) Reset() {
	*x = AppServInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatbot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppServInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppServInfo) ProtoMessage() {}

func (x *AppServInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chatbot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppServInfo.ProtoReflect.Descriptor instead.
func (*AppServInfo) Descriptor() ([]byte, []int) {
	return file_chatbot_proto_rawDescGZIP(), []int{4}
}

func (x *AppServInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AppServInfo) GetAppType() ChatAppType {
	if x != nil {
		return x.AppType
	}
	return ChatAppType_CAT_TELEGRAM
}

func (x *AppServInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AppServInfo) GetSessionid() string {
	if x != nil {
		return x.Sessionid
	}
	return ""
}

// RegisterAppService - register app service
type RegisterAppService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppServ *AppServInfo `protobuf:"bytes,1,opt,name=appServ,proto3" json:"appServ,omitempty"`
}

func (x *RegisterAppService) Reset() {
	*x = RegisterAppService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatbot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterAppService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAppService) ProtoMessage() {}

func (x *RegisterAppService) ProtoReflect() protoreflect.Message {
	mi := &file_chatbot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAppService.ProtoReflect.Descriptor instead.
func (*RegisterAppService) Descriptor() ([]byte, []int) {
	return file_chatbot_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterAppService) GetAppServ() *AppServInfo {
	if x != nil {
		return x.AppServ
	}
	return nil
}

// ReplyRegisterAppService - reply RegisterAppService
type ReplyRegisterAppService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppType   ChatAppType `protobuf:"varint,1,opt,name=appType,proto3,enum=chatbotpb.ChatAppType" json:"appType,omitempty"`
	Error     string      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	SessionID string      `protobuf:"bytes,3,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (x *ReplyRegisterAppService) Reset() {
	*x = ReplyRegisterAppService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatbot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyRegisterAppService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyRegisterAppService) ProtoMessage() {}

func (x *ReplyRegisterAppService) ProtoReflect() protoreflect.Message {
	mi := &file_chatbot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyRegisterAppService.ProtoReflect.Descriptor instead.
func (*ReplyRegisterAppService) Descriptor() ([]byte, []int) {
	return file_chatbot_proto_rawDescGZIP(), []int{6}
}

func (x *ReplyRegisterAppService) GetAppType() ChatAppType {
	if x != nil {
		return x.AppType
	}
	return ChatAppType_CAT_TELEGRAM
}

func (x *ReplyRegisterAppService) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ReplyRegisterAppService) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

// FileData - file data
type FileData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	FileData []byte `protobuf:"bytes,2,opt,name=fileData,proto3" json:"fileData,omitempty"`
	FileType string `protobuf:"bytes,3,opt,name=fileType,proto3" json:"fileType,omitempty"`
}

func (x *FileData) Reset() {
	*x = FileData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatbot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileData) ProtoMessage() {}

func (x *FileData) ProtoReflect() protoreflect.Message {
	mi := &file_chatbot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileData.ProtoReflect.Descriptor instead.
func (*FileData) Descriptor() ([]byte, []int) {
	return file_chatbot_proto_rawDescGZIP(), []int{7}
}

func (x *FileData) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileData) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

func (x *FileData) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

// ChatMsg - chat message
type ChatMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string        `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Uai *UserAppInfo  `protobuf:"bytes,2,opt,name=uai,proto3" json:"uai,omitempty"`
	Agi *AppGroupInfo `protobuf:"bytes,3,opt,name=agi,proto3" json:"agi,omitempty"`
	// Deprecated: Do not use.
	Filename string `protobuf:"bytes,4,opt,name=filename,proto3" json:"filename,omitempty"`
	// Deprecated: Do not use.
	FileData  []byte `protobuf:"bytes,5,opt,name=fileData,proto3" json:"fileData,omitempty"`
	Error     string `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	Token     string `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
	SessionID string `protobuf:"bytes,8,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	// Deprecated: Do not use.
	FileType string    `protobuf:"bytes,9,opt,name=fileType,proto3" json:"fileType,omitempty"`
	File     *FileData `protobuf:"bytes,10,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *ChatMsg) Reset() {
	*x = ChatMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatbot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMsg) ProtoMessage() {}

func (x *ChatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chatbot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMsg.ProtoReflect.Descriptor instead.
func (*ChatMsg) Descriptor() ([]byte, []int) {
	return file_chatbot_proto_rawDescGZIP(), []int{8}
}

func (x *ChatMsg) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ChatMsg) GetUai() *UserAppInfo {
	if x != nil {
		return x.Uai
	}
	return nil
}

func (x *ChatMsg) GetAgi() *AppGroupInfo {
	if x != nil {
		return x.Agi
	}
	return nil
}

// Deprecated: Do not use.
func (x *ChatMsg) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// Deprecated: Do not use.
func (x *ChatMsg) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

func (x *ChatMsg) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ChatMsg) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ChatMsg) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

// Deprecated: Do not use.
func (x *ChatMsg) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *ChatMsg) GetFile() *FileData {
	if x != nil {
		return x.File
	}
	return nil
}

// ChatMsgStream - chat message stream
type ChatMsgStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// totalLength - If the message is too long, it will send data in multiple msg, this is the total length.
	TotalLength int32 `protobuf:"varint,1,opt,name=totalLength,proto3" json:"totalLength,omitempty"`
	// curStart - The starting point of the current data (in bytes).
	CurStart int32 `protobuf:"varint,2,opt,name=curStart,proto3" json:"curStart,omitempty"`
	// curLength - The length of the current data (in bytes).
	CurLength int32 `protobuf:"varint,3,opt,name=curLength,proto3" json:"curLength,omitempty"`
	// hashData - This is the hash of each paragraph.
	HashData string `protobuf:"bytes,4,opt,name=hashData,proto3" json:"hashData,omitempty"`
	// totalHashData - If multiple messages return data, this is the hash value of all data, only sent in the last message.
	TotalHashData string `protobuf:"bytes,5,opt,name=totalHashData,proto3" json:"totalHashData,omitempty"`
	// data
	Data []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	// error
	Error string `protobuf:"bytes,7,opt,name=error,proto3" json:"error,omitempty"`
	// token
	Token string `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
	// sessionID
	SessionID string `protobuf:"bytes,9,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	// chat
	Chat *ChatMsg `protobuf:"bytes,10,opt,name=chat,proto3" json:"chat,omitempty"`
	// isNoMsg - no msg
	IsNoMsg bool `protobuf:"varint,11,opt,name=isNoMsg,proto3" json:"isNoMsg,omitempty"`
}

func (x *ChatMsgStream) Reset() {
	*x = ChatMsgStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatbot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMsgStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMsgStream) ProtoMessage() {}

func (x *ChatMsgStream) ProtoReflect() protoreflect.Message {
	mi := &file_chatbot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMsgStream.ProtoReflect.Descriptor instead.
func (*ChatMsgStream) Descriptor() ([]byte, []int) {
	return file_chatbot_proto_rawDescGZIP(), []int{9}
}

func (x *ChatMsgStream) GetTotalLength() int32 {
	if x != nil {
		return x.TotalLength
	}
	return 0
}

func (x *ChatMsgStream) GetCurStart() int32 {
	if x != nil {
		return x.CurStart
	}
	return 0
}

func (x *ChatMsgStream) GetCurLength() int32 {
	if x != nil {
		return x.CurLength
	}
	return 0
}

func (x *ChatMsgStream) GetHashData() string {
	if x != nil {
		return x.HashData
	}
	return ""
}

func (x *ChatMsgStream) GetTotalHashData() string {
	if x != nil {
		return x.TotalHashData
	}
	return ""
}

func (x *ChatMsgStream) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChatMsgStream) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ChatMsgStream) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ChatMsgStream) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *ChatMsgStream) GetChat() *ChatMsg {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *ChatMsgStream) GetIsNoMsg() bool {
	if x != nil {
		return x.IsNoMsg
	}
	return false
}

// RequestChatData - request chat data
type RequestChatData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	SessionID string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (x *RequestChatData) Reset() {
	*x = RequestChatData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatbot_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestChatData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestChatData) ProtoMessage() {}

func (x *RequestChatData) ProtoReflect() protoreflect.Message {
	mi := &file_chatbot_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestChatData.ProtoReflect.Descriptor instead.
func (*RequestChatData) Descriptor() ([]byte, []int) {
	return file_chatbot_proto_rawDescGZIP(), []int{10}
}

func (x *RequestChatData) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RequestChatData) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

// RequestCtrlData - request app control data
type RequestCtrlData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastCtrlID int64  `protobuf:"varint,1,opt,name=lastCtrlID,proto3" json:"lastCtrlID,omitempty"`
	Token      string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *RequestCtrlData) Reset() {
	*x = RequestCtrlData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatbot_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCtrlData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCtrlData) ProtoMessage() {}

func (x *RequestCtrlData) ProtoReflect() protoreflect.Message {
	mi := &file_chatbot_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCtrlData.ProtoReflect.Descriptor instead.
func (*RequestCtrlData) Descriptor() ([]byte, []int) {
	return file_chatbot_proto_rawDescGZIP(), []int{11}
}

func (x *RequestCtrlData) GetLastCtrlID() int64 {
	if x != nil {
		return x.LastCtrlID
	}
	return 0
}

func (x *RequestCtrlData) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// AppCtrlData - app control data
type AppCtrlData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CtrlID  int64           `protobuf:"varint,1,opt,name=ctrlID,proto3" json:"ctrlID,omitempty"`
	Act     AppCtrlType     `protobuf:"varint,2,opt,name=act,proto3,enum=chatbotpb.AppCtrlType" json:"act,omitempty"`
	Channel *AppChannelInfo `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *AppCtrlData) Reset() {
	*x = AppCtrlData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatbot_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppCtrlData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppCtrlData) ProtoMessage() {}

func (x *AppCtrlData) ProtoReflect() protoreflect.Message {
	mi := &file_chatbot_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppCtrlData.ProtoReflect.Descriptor instead.
func (*AppCtrlData) Descriptor() ([]byte, []int) {
	return file_chatbot_proto_rawDescGZIP(), []int{12}
}

func (x *AppCtrlData) GetCtrlID() int64 {
	if x != nil {
		return x.CtrlID
	}
	return 0
}

func (x *AppCtrlData) GetAct() AppCtrlType {
	if x != nil {
		return x.Act
	}
	return AppCtrlType_ACT_JOINCHANNEL
}

func (x *AppCtrlData) GetChannel() *AppChannelInfo {
	if x != nil {
		return x.Channel
	}
	return nil
}

// AppCtrlResult - app control result
type AppCtrlResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CtrlID     int64        `protobuf:"varint,1,opt,name=ctrlID,proto3" json:"ctrlID,omitempty"`
	Token      string       `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Ctrl       *AppCtrlData `protobuf:"bytes,3,opt,name=ctrl,proto3" json:"ctrl,omitempty"`
	ResultCode int32        `protobuf:"varint,4,opt,name=resultCode,proto3" json:"resultCode,omitempty"`
}

func (x *AppCtrlResult) Reset() {
	*x = AppCtrlResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatbot_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppCtrlResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppCtrlResult) ProtoMessage() {}

func (x *AppCtrlResult) ProtoReflect() protoreflect.Message {
	mi := &file_chatbot_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppCtrlResult.ProtoReflect.Descriptor instead.
func (*AppCtrlResult) Descriptor() ([]byte, []int) {
	return file_chatbot_proto_rawDescGZIP(), []int{13}
}

func (x *AppCtrlResult) GetCtrlID() int64 {
	if x != nil {
		return x.CtrlID
	}
	return 0
}

func (x *AppCtrlResult) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AppCtrlResult) GetCtrl() *AppCtrlData {
	if x != nil {
		return x.Ctrl
	}
	return nil
}

func (x *AppCtrlResult) GetResultCode() int32 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

// SCRResult - result for sendctrlresult
type SCRResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CtrlID     int64 `protobuf:"varint,1,opt,name=ctrlID,proto3" json:"ctrlID,omitempty"`
	ResultCode int32 `protobuf:"varint,2,opt,name=resultCode,proto3" json:"resultCode,omitempty"`
}

func (x *SCRResult) Reset() {
	*x = SCRResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatbot_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRResult) ProtoMessage() {}

func (x *SCRResult) ProtoReflect() protoreflect.Message {
	mi := &file_chatbot_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRResult.ProtoReflect.Descriptor instead.
func (*SCRResult) Descriptor() ([]byte, []int) {
	return file_chatbot_proto_rawDescGZIP(), []int{14}
}

func (x *SCRResult) GetCtrlID() int64 {
	if x != nil {
		return x.CtrlID
	}
	return 0
}

func (x *SCRResult) GetResultCode() int32 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

// ChatBotServInfo - ChatBot service infomation
type ChatBotServInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	SessionID string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	ServName  string `protobuf:"bytes,3,opt,name=servName,proto3" json:"servName,omitempty"`
}

func (x *ChatBotServInfo) Reset() {
	*x = ChatBotServInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatbot_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatBotServInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatBotServInfo) ProtoMessage() {}

func (x *ChatBotServInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chatbot_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatBotServInfo.ProtoReflect.Descriptor instead.
func (*ChatBotServInfo) Descriptor() ([]byte, []int) {
	return file_chatbot_proto_rawDescGZIP(), []int{15}
}

func (x *ChatBotServInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ChatBotServInfo) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *ChatBotServInfo) GetServName() string {
	if x != nil {
		return x.ServName
	}
	return ""
}

// RegisterChatBotServ - register chatbot service
type RegisterChatBotServ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServInfo *ChatBotServInfo `protobuf:"bytes,1,opt,name=servInfo,proto3" json:"servInfo,omitempty"`
}

func (x *RegisterChatBotServ) Reset() {
	*x = RegisterChatBotServ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatbot_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterChatBotServ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterChatBotServ) ProtoMessage() {}

func (x *RegisterChatBotServ) ProtoReflect() protoreflect.Message {
	mi := &file_chatbot_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterChatBotServ.ProtoReflect.Descriptor instead.
func (*RegisterChatBotServ) Descriptor() ([]byte, []int) {
	return file_chatbot_proto_rawDescGZIP(), []int{16}
}

func (x *RegisterChatBotServ) GetServInfo() *ChatBotServInfo {
	if x != nil {
		return x.ServInfo
	}
	return nil
}

// ReplyRegisterChatBotServ - reply RegisterChatBotServ
type ReplyRegisterChatBotServ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	SessionID string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Error     string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReplyRegisterChatBotServ) Reset() {
	*x = ReplyRegisterChatBotServ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chatbot_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyRegisterChatBotServ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyRegisterChatBotServ) ProtoMessage() {}

func (x *ReplyRegisterChatBotServ) ProtoReflect() protoreflect.Message {
	mi := &file_chatbot_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyRegisterChatBotServ.ProtoReflect.Descriptor instead.
func (*ReplyRegisterChatBotServ) Descriptor() ([]byte, []int) {
	return file_chatbot_proto_rawDescGZIP(), []int{17}
}

func (x *ReplyRegisterChatBotServ) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ReplyRegisterChatBotServ) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *ReplyRegisterChatBotServ) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_chatbot_proto protoreflect.FileDescriptor

var file_chatbot_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x70, 0x62, 0x22, 0xc5, 0x01, 0x0a, 0x0b, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x03, 0x61, 0x70,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f,
	0x74, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x03, 0x61, 0x70, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x75, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x70, 0x70, 0x75, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74,
	0x6e, 0x75, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74,
	0x6e, 0x75, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x22, 0xa2, 0x01, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x70, 0x62, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x61, 0x70, 0x70,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0x9a, 0x01, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x70,
	0x62, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x61,
	0x70, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x70,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x70, 0x62,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x61, 0x70,
	0x70, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x70, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x0b,
	0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x70, 0x62, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x22, 0x46, 0x0a,
	0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x70, 0x62,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x22, 0x7f, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x30, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x5e, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc3, 0x02, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x28, 0x0a, 0x03, 0x75, 0x61, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x70, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x75, 0x61, 0x69, 0x12, 0x29,
	0x0a, 0x03, 0x61, 0x67, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x62, 0x6f, 0x74, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x61, 0x67, 0x69, 0x12, 0x1e, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xcd, 0x02, 0x0a,
	0x0d, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x75, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x75, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61,
	0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61,
	0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48,
	0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x04, 0x63, 0x68,
	0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62,
	0x6f, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x63, 0x68,
	0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x4e, 0x6f, 0x4d, 0x73, 0x67, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4e, 0x6f, 0x4d, 0x73, 0x67, 0x22, 0x45, 0x0a, 0x0f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x22, 0x47, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x74,
	0x72, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x74,
	0x72, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x43, 0x74, 0x72, 0x6c, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x84, 0x01, 0x0a,
	0x0b, 0x41, 0x70, 0x70, 0x43, 0x74, 0x72, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x74, 0x72, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x74,
	0x72, 0x6c, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x03, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x70, 0x62, 0x2e, 0x41, 0x70,
	0x70, 0x43, 0x74, 0x72, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x61, 0x63, 0x74, 0x12, 0x33,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x22, 0x89, 0x01, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x43, 0x74, 0x72, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x74, 0x72, 0x6c, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x74, 0x72, 0x6c, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x63, 0x74, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x70, 0x62, 0x2e, 0x41, 0x70,
	0x70, 0x43, 0x74, 0x72, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x63, 0x74, 0x72, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x43, 0x0a, 0x09, 0x53, 0x43, 0x52, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x74, 0x72, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x74,
	0x72, 0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x61, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x74, 0x42, 0x6f, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x42, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x12, 0x36,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x42, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x64, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x42, 0x6f, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2a, 0x2e, 0x0a, 0x0b,
	0x43, 0x68, 0x61, 0x74, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x41, 0x54, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x51, 0x10, 0x01, 0x2a, 0x22, 0x0a, 0x0b,
	0x41, 0x70, 0x70, 0x43, 0x74, 0x72, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x43, 0x54, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x00,
	0x32, 0x83, 0x03, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x42, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x62, 0x6f, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62,
	0x6f, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x44,
	0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x12, 0x18, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x62, 0x6f, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x1a, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x70, 0x62,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x47, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x12, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x18, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x73, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x00, 0x30, 0x01, 0x12, 0x43, 0x0a,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x74, 0x72, 0x6c, 0x12, 0x1a, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x74, 0x72, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62,
	0x6f, 0x74, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x74, 0x72, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x74, 0x72, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x70, 0x62,
	0x2e, 0x41, 0x70, 0x70, 0x43, 0x74, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x14,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x43, 0x52, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x32, 0x72, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x74, 0x42, 0x6f,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x13,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x42, 0x6f, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x12, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x42, 0x6f, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x1a, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x74, 0x42, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x22, 0x00, 0x42, 0x1b, 0x5a, 0x19, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x68, 0x73, 0x30, 0x30, 0x37, 0x2f,
	0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chatbot_proto_rawDescOnce sync.Once
	file_chatbot_proto_rawDescData = file_chatbot_proto_rawDesc
)

func file_chatbot_proto_rawDescGZIP() []byte {
	file_chatbot_proto_rawDescOnce.Do(func() {
		file_chatbot_proto_rawDescData = protoimpl.X.CompressGZIP(file_chatbot_proto_rawDescData)
	})
	return file_chatbot_proto_rawDescData
}

var file_chatbot_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_chatbot_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_chatbot_proto_goTypes = []interface{}{
	(ChatAppType)(0),                 // 0: chatbotpb.ChatAppType
	(AppCtrlType)(0),                 // 1: chatbotpb.AppCtrlType
	(*UserAppInfo)(nil),              // 2: chatbotpb.UserAppInfo
	(*UserInfo)(nil),                 // 3: chatbotpb.UserInfo
	(*AppGroupInfo)(nil),             // 4: chatbotpb.AppGroupInfo
	(*AppChannelInfo)(nil),           // 5: chatbotpb.AppChannelInfo
	(*AppServInfo)(nil),              // 6: chatbotpb.AppServInfo
	(*RegisterAppService)(nil),       // 7: chatbotpb.RegisterAppService
	(*ReplyRegisterAppService)(nil),  // 8: chatbotpb.ReplyRegisterAppService
	(*FileData)(nil),                 // 9: chatbotpb.FileData
	(*ChatMsg)(nil),                  // 10: chatbotpb.ChatMsg
	(*ChatMsgStream)(nil),            // 11: chatbotpb.ChatMsgStream
	(*RequestChatData)(nil),          // 12: chatbotpb.RequestChatData
	(*RequestCtrlData)(nil),          // 13: chatbotpb.RequestCtrlData
	(*AppCtrlData)(nil),              // 14: chatbotpb.AppCtrlData
	(*AppCtrlResult)(nil),            // 15: chatbotpb.AppCtrlResult
	(*SCRResult)(nil),                // 16: chatbotpb.SCRResult
	(*ChatBotServInfo)(nil),          // 17: chatbotpb.ChatBotServInfo
	(*RegisterChatBotServ)(nil),      // 18: chatbotpb.RegisterChatBotServ
	(*ReplyRegisterChatBotServ)(nil), // 19: chatbotpb.ReplyRegisterChatBotServ
}
var file_chatbot_proto_depIdxs = []int32{
	0,  // 0: chatbotpb.UserAppInfo.app:type_name -> chatbotpb.ChatAppType
	2,  // 1: chatbotpb.UserInfo.apps:type_name -> chatbotpb.UserAppInfo
	0,  // 2: chatbotpb.AppGroupInfo.app:type_name -> chatbotpb.ChatAppType
	0,  // 3: chatbotpb.AppChannelInfo.app:type_name -> chatbotpb.ChatAppType
	0,  // 4: chatbotpb.AppServInfo.appType:type_name -> chatbotpb.ChatAppType
	6,  // 5: chatbotpb.RegisterAppService.appServ:type_name -> chatbotpb.AppServInfo
	0,  // 6: chatbotpb.ReplyRegisterAppService.appType:type_name -> chatbotpb.ChatAppType
	2,  // 7: chatbotpb.ChatMsg.uai:type_name -> chatbotpb.UserAppInfo
	4,  // 8: chatbotpb.ChatMsg.agi:type_name -> chatbotpb.AppGroupInfo
	9,  // 9: chatbotpb.ChatMsg.file:type_name -> chatbotpb.FileData
	10, // 10: chatbotpb.ChatMsgStream.chat:type_name -> chatbotpb.ChatMsg
	1,  // 11: chatbotpb.AppCtrlData.act:type_name -> chatbotpb.AppCtrlType
	5,  // 12: chatbotpb.AppCtrlData.channel:type_name -> chatbotpb.AppChannelInfo
	14, // 13: chatbotpb.AppCtrlResult.ctrl:type_name -> chatbotpb.AppCtrlData
	17, // 14: chatbotpb.RegisterChatBotServ.servInfo:type_name -> chatbotpb.ChatBotServInfo
	7,  // 15: chatbotpb.ChatBotService.registerAppService:input_type -> chatbotpb.RegisterAppService
	11, // 16: chatbotpb.ChatBotService.sendChat:input_type -> chatbotpb.ChatMsgStream
	12, // 17: chatbotpb.ChatBotService.requestChat:input_type -> chatbotpb.RequestChatData
	13, // 18: chatbotpb.ChatBotService.requestCtrl:input_type -> chatbotpb.RequestCtrlData
	15, // 19: chatbotpb.ChatBotService.sendCtrlResult:input_type -> chatbotpb.AppCtrlResult
	18, // 20: chatbotpb.ChatBotUserService.registerChatBotServ:input_type -> chatbotpb.RegisterChatBotServ
	8,  // 21: chatbotpb.ChatBotService.registerAppService:output_type -> chatbotpb.ReplyRegisterAppService
	11, // 22: chatbotpb.ChatBotService.sendChat:output_type -> chatbotpb.ChatMsgStream
	11, // 23: chatbotpb.ChatBotService.requestChat:output_type -> chatbotpb.ChatMsgStream
	14, // 24: chatbotpb.ChatBotService.requestCtrl:output_type -> chatbotpb.AppCtrlData
	16, // 25: chatbotpb.ChatBotService.sendCtrlResult:output_type -> chatbotpb.SCRResult
	19, // 26: chatbotpb.ChatBotUserService.registerChatBotServ:output_type -> chatbotpb.ReplyRegisterChatBotServ
	21, // [21:27] is the sub-list for method output_type
	15, // [15:21] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_chatbot_proto_init() }
func file_chatbot_proto_init() {
	if File_chatbot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chatbot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatbot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatbot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatbot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatbot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppServInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatbot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterAppService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatbot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyRegisterAppService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatbot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatbot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatbot_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMsgStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatbot_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestChatData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatbot_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCtrlData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatbot_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppCtrlData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatbot_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppCtrlResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatbot_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatbot_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatBotServInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatbot_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterChatBotServ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chatbot_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyRegisterChatBotServ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chatbot_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_chatbot_proto_goTypes,
		DependencyIndexes: file_chatbot_proto_depIdxs,
		EnumInfos:         file_chatbot_proto_enumTypes,
		MessageInfos:      file_chatbot_proto_msgTypes,
	}.Build()
	File_chatbot_proto = out.File
	file_chatbot_proto_rawDesc = nil
	file_chatbot_proto_goTypes = nil
	file_chatbot_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChatBotServiceClient is the client API for ChatBotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatBotServiceClient interface {
	// registerAppService - register app service
	RegisterAppService(ctx context.Context, in *RegisterAppService, opts ...grpc.CallOption) (*ReplyRegisterAppService, error)
	// sendChat - send chat
	SendChat(ctx context.Context, opts ...grpc.CallOption) (ChatBotService_SendChatClient, error)
	// requestChat - request chat
	RequestChat(ctx context.Context, in *RequestChatData, opts ...grpc.CallOption) (ChatBotService_RequestChatClient, error)
	// requestCtrl - request control
	RequestCtrl(ctx context.Context, in *RequestCtrlData, opts ...grpc.CallOption) (*AppCtrlData, error)
	// sendCtrlResult - send control result
	SendCtrlResult(ctx context.Context, in *AppCtrlResult, opts ...grpc.CallOption) (*SCRResult, error)
}

type chatBotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatBotServiceClient(cc grpc.ClientConnInterface) ChatBotServiceClient {
	return &chatBotServiceClient{cc}
}

func (c *chatBotServiceClient) RegisterAppService(ctx context.Context, in *RegisterAppService, opts ...grpc.CallOption) (*ReplyRegisterAppService, error) {
	out := new(ReplyRegisterAppService)
	err := c.cc.Invoke(ctx, "/chatbotpb.ChatBotService/registerAppService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatBotServiceClient) SendChat(ctx context.Context, opts ...grpc.CallOption) (ChatBotService_SendChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatBotService_serviceDesc.Streams[0], "/chatbotpb.ChatBotService/sendChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatBotServiceSendChatClient{stream}
	return x, nil
}

type ChatBotService_SendChatClient interface {
	Send(*ChatMsgStream) error
	Recv() (*ChatMsgStream, error)
	grpc.ClientStream
}

type chatBotServiceSendChatClient struct {
	grpc.ClientStream
}

func (x *chatBotServiceSendChatClient) Send(m *ChatMsgStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatBotServiceSendChatClient) Recv() (*ChatMsgStream, error) {
	m := new(ChatMsgStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatBotServiceClient) RequestChat(ctx context.Context, in *RequestChatData, opts ...grpc.CallOption) (ChatBotService_RequestChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatBotService_serviceDesc.Streams[1], "/chatbotpb.ChatBotService/requestChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatBotServiceRequestChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatBotService_RequestChatClient interface {
	Recv() (*ChatMsgStream, error)
	grpc.ClientStream
}

type chatBotServiceRequestChatClient struct {
	grpc.ClientStream
}

func (x *chatBotServiceRequestChatClient) Recv() (*ChatMsgStream, error) {
	m := new(ChatMsgStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatBotServiceClient) RequestCtrl(ctx context.Context, in *RequestCtrlData, opts ...grpc.CallOption) (*AppCtrlData, error) {
	out := new(AppCtrlData)
	err := c.cc.Invoke(ctx, "/chatbotpb.ChatBotService/requestCtrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatBotServiceClient) SendCtrlResult(ctx context.Context, in *AppCtrlResult, opts ...grpc.CallOption) (*SCRResult, error) {
	out := new(SCRResult)
	err := c.cc.Invoke(ctx, "/chatbotpb.ChatBotService/sendCtrlResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatBotServiceServer is the server API for ChatBotService service.
type ChatBotServiceServer interface {
	// registerAppService - register app service
	RegisterAppService(context.Context, *RegisterAppService) (*ReplyRegisterAppService, error)
	// sendChat - send chat
	SendChat(ChatBotService_SendChatServer) error
	// requestChat - request chat
	RequestChat(*RequestChatData, ChatBotService_RequestChatServer) error
	// requestCtrl - request control
	RequestCtrl(context.Context, *RequestCtrlData) (*AppCtrlData, error)
	// sendCtrlResult - send control result
	SendCtrlResult(context.Context, *AppCtrlResult) (*SCRResult, error)
}

// UnimplementedChatBotServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChatBotServiceServer struct {
}

func (*UnimplementedChatBotServiceServer) RegisterAppService(context.Context, *RegisterAppService) (*ReplyRegisterAppService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAppService not implemented")
}
func (*UnimplementedChatBotServiceServer) SendChat(ChatBotService_SendChatServer) error {
	return status.Errorf(codes.Unimplemented, "method SendChat not implemented")
}
func (*UnimplementedChatBotServiceServer) RequestChat(*RequestChatData, ChatBotService_RequestChatServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestChat not implemented")
}
func (*UnimplementedChatBotServiceServer) RequestCtrl(context.Context, *RequestCtrlData) (*AppCtrlData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCtrl not implemented")
}
func (*UnimplementedChatBotServiceServer) SendCtrlResult(context.Context, *AppCtrlResult) (*SCRResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCtrlResult not implemented")
}

func RegisterChatBotServiceServer(s *grpc.Server, srv ChatBotServiceServer) {
	s.RegisterService(&_ChatBotService_serviceDesc, srv)
}

func _ChatBotService_RegisterAppService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAppService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatBotServiceServer).RegisterAppService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatbotpb.ChatBotService/RegisterAppService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatBotServiceServer).RegisterAppService(ctx, req.(*RegisterAppService))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatBotService_SendChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatBotServiceServer).SendChat(&chatBotServiceSendChatServer{stream})
}

type ChatBotService_SendChatServer interface {
	Send(*ChatMsgStream) error
	Recv() (*ChatMsgStream, error)
	grpc.ServerStream
}

type chatBotServiceSendChatServer struct {
	grpc.ServerStream
}

func (x *chatBotServiceSendChatServer) Send(m *ChatMsgStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatBotServiceSendChatServer) Recv() (*ChatMsgStream, error) {
	m := new(ChatMsgStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatBotService_RequestChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestChatData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatBotServiceServer).RequestChat(m, &chatBotServiceRequestChatServer{stream})
}

type ChatBotService_RequestChatServer interface {
	Send(*ChatMsgStream) error
	grpc.ServerStream
}

type chatBotServiceRequestChatServer struct {
	grpc.ServerStream
}

func (x *chatBotServiceRequestChatServer) Send(m *ChatMsgStream) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatBotService_RequestCtrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCtrlData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatBotServiceServer).RequestCtrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatbotpb.ChatBotService/RequestCtrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatBotServiceServer).RequestCtrl(ctx, req.(*RequestCtrlData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatBotService_SendCtrlResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppCtrlResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatBotServiceServer).SendCtrlResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatbotpb.ChatBotService/SendCtrlResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatBotServiceServer).SendCtrlResult(ctx, req.(*AppCtrlResult))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatBotService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chatbotpb.ChatBotService",
	HandlerType: (*ChatBotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registerAppService",
			Handler:    _ChatBotService_RegisterAppService_Handler,
		},
		{
			MethodName: "requestCtrl",
			Handler:    _ChatBotService_RequestCtrl_Handler,
		},
		{
			MethodName: "sendCtrlResult",
			Handler:    _ChatBotService_SendCtrlResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sendChat",
			Handler:       _ChatBotService_SendChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "requestChat",
			Handler:       _ChatBotService_RequestChat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chatbot.proto",
}

// ChatBotUserServiceClient is the client API for ChatBotUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatBotUserServiceClient interface {
	// getUserInfo - register app service
	RegisterChatBotServ(ctx context.Context, in *RegisterChatBotServ, opts ...grpc.CallOption) (*ReplyRegisterChatBotServ, error)
}

type chatBotUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatBotUserServiceClient(cc grpc.ClientConnInterface) ChatBotUserServiceClient {
	return &chatBotUserServiceClient{cc}
}

func (c *chatBotUserServiceClient) RegisterChatBotServ(ctx context.Context, in *RegisterChatBotServ, opts ...grpc.CallOption) (*ReplyRegisterChatBotServ, error) {
	out := new(ReplyRegisterChatBotServ)
	err := c.cc.Invoke(ctx, "/chatbotpb.ChatBotUserService/registerChatBotServ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatBotUserServiceServer is the server API for ChatBotUserService service.
type ChatBotUserServiceServer interface {
	// getUserInfo - register app service
	RegisterChatBotServ(context.Context, *RegisterChatBotServ) (*ReplyRegisterChatBotServ, error)
}

// UnimplementedChatBotUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChatBotUserServiceServer struct {
}

func (*UnimplementedChatBotUserServiceServer) RegisterChatBotServ(context.Context, *RegisterChatBotServ) (*ReplyRegisterChatBotServ, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterChatBotServ not implemented")
}

func RegisterChatBotUserServiceServer(s *grpc.Server, srv ChatBotUserServiceServer) {
	s.RegisterService(&_ChatBotUserService_serviceDesc, srv)
}

func _ChatBotUserService_RegisterChatBotServ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterChatBotServ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatBotUserServiceServer).RegisterChatBotServ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatbotpb.ChatBotUserService/RegisterChatBotServ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatBotUserServiceServer).RegisterChatBotServ(ctx, req.(*RegisterChatBotServ))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatBotUserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chatbotpb.ChatBotUserService",
	HandlerType: (*ChatBotUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registerChatBotServ",
			Handler:    _ChatBotUserService_RegisterChatBotServ_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chatbot.proto",
}
