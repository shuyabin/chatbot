syntax = "proto3";
package chatbotpb;

// ChatAppType - chat app type
enum ChatAppType {
    CAT_TELEGRAM = 0;
    CAT_COOLQQ = 1;
};

// UserAppInfo - user app info
message UserAppInfo {
    ChatAppType app = 1;
    string appuid = 2;
    string appuname = 3;
    int32 chatnums = 4;
    string usernameAppServ = 5;
}

// UserInfo - user info
message UserInfo {
    int64 uid = 1;
    string name = 2;
    repeated UserAppInfo apps = 3;
    
    int64 money = 10;
}

// AppGroupInfo - app group info
message AppGroupInfo {
    ChatAppType app = 1;
    string usernameAppServ = 2;
    string groupid = 3;
    string groupname = 4;
}

// RegisterAppService - register app service
message RegisterAppService {
    string token = 1;
    ChatAppType appType = 2;
    string username = 3;
}

// ReplyRegisterAppService - reply RegisterAppService
message ReplyRegisterAppService {
    ChatAppType appType = 1;
    string error = 2;
}

// ChatMsg - chat message
message ChatMsg {
    string msg = 1;
    UserAppInfo uai = 2;
    AppGroupInfo agi = 3;
    string filename = 4;
    bytes fileData = 5;
    string error = 6;
    string token = 7;
}

// ChatMsgStream - chat message stream
message ChatMsgStream {
    // totalLength - If the message is too long, it will send data in multiple msg, this is the total length.
    int32 totalLength = 1;
    // curStart - The starting point of the current data (in bytes).
    int32 curStart = 2;
    // curLength - The length of the current data (in bytes).
    int32 curLength = 3;
    // hashData - This is the hash of each paragraph.
    string hashData = 4;
    // totalHashData - If multiple messages return data, this is the hash value of all data, only sent in the last message.
    string totalHashData = 5;
    // data
    bytes data = 6;
    // error
    string error = 7;
    // token
    string token = 8;

    ChatMsg chat = 10;
}

// RequestChatData - request chat data
message RequestChatData {
    string token = 1;
}

// ChatBotService - ChatBot service
service ChatBotService {
    // registerAppService - register app service
    rpc registerAppService(RegisterAppService) returns (ReplyRegisterAppService) {}

    // sendChat - send chat
    rpc sendChat(stream ChatMsgStream) returns (stream ChatMsgStream) {}
    // requestChat - request chat
    rpc requestChat(RequestChatData) returns (stream ChatMsgStream) {}    
}