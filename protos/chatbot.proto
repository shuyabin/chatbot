syntax = "proto3";
package chatbotpb;
option go_package = "github.com/zhs007/chatbot/chatbotpb";

// ChatAppType - chat app type
enum ChatAppType {
    CAT_TELEGRAM = 0;
    CAT_COOLQ = 1;
};

// UserAppInfo - user app info
message UserAppInfo {
    ChatAppType app = 1;
    string appuid = 2;
    string appuname = 3;
    int32 chatnums = 4;
    string usernameAppServ = 5;
    string lang = 6;
}

// UserInfo - user info
message UserInfo {
    int64 uid = 1;
    string name = 2;
    repeated UserAppInfo apps = 3;
    repeated string tags = 4;
    string language = 5;
    
    int64 money = 10;
}

// AppGroupInfo - app group info
message AppGroupInfo {
    ChatAppType app = 1;
    string usernameAppServ = 2;
    string groupid = 3;
    string groupname = 4;
}

// AppChannelInfo - app channel info
message AppChannelInfo {
    ChatAppType app = 1;
    string usernameAppServ = 2;
    string channelid = 3;
    string channelname = 4;
}

// AppServInfo - app server info
message AppServInfo {
    string token = 1;
    ChatAppType appType = 2;
    string username = 3;
    string sessionid = 4;
}

// RegisterAppService - register app service
message RegisterAppService {
    AppServInfo appServ = 1;
}

// ReplyRegisterAppService - reply RegisterAppService
message ReplyRegisterAppService {
    ChatAppType appType = 1;
    string error = 2;
    string sessionID = 3;
}

// FileData - file data
message FileData {
    string filename = 1;
    bytes fileData = 2;
    string fileType = 3;
}

// ImageData - image data
message ImageData {
    int32 width = 1;
    int32 height = 2;
    string filename = 3;
    string appfileid = 4;
    bytes fileData = 5;
}

// ForwardData - forward data
message ForwardData {
    UserAppInfo uai = 1;
    string appMsgID = 2;
    int64 date = 3;
}

// ChatMsg - chat message
message ChatMsg {
    string msg = 1;
    UserAppInfo uai = 2;
    AppGroupInfo agi = 3;
    string filename = 4 [deprecated = true];
    bytes fileData = 5 [deprecated = true];
    string error = 6;
    string token = 7;
    string sessionID = 8;
    string fileType = 9 [deprecated = true];
    FileData file = 10;
    repeated ImageData imgs = 11;
    ForwardData forward = 12;
    string caption = 13;
    string appMsgID = 14;
}

// ChatMsgStream - chat message stream
message ChatMsgStream {
    // totalLength - If the message is too long, it will send data in multiple msg, this is the total length.
    int32 totalLength = 1;
    // curStart - The starting point of the current data (in bytes).
    int32 curStart = 2;
    // curLength - The length of the current data (in bytes).
    int32 curLength = 3;
    // hashData - This is the hash of each paragraph.
    string hashData = 4;
    // totalHashData - If multiple messages return data, this is the hash value of all data, only sent in the last message.
    string totalHashData = 5;
    // data
    bytes data = 6;
    // error
    string error = 7;
    // token
    string token = 8;
    // sessionID
    string sessionID = 9;
    // chat
    ChatMsg chat = 10;
    // isNoMsg - no msg
    bool isNoMsg = 11;
}

// RequestChatData - request chat data
message RequestChatData {
    string token = 1;
    string sessionID = 2;
}

// AppCtrlType - app control type
enum AppCtrlType {
    ACT_JOINCHANNEL = 0;
}

// RequestCtrlData - request app control data
message RequestCtrlData {
    int64 lastCtrlID = 1;
    string token = 2;
}

// AppCtrlData - app control data
message AppCtrlData {
    int64 ctrlID = 1;
    AppCtrlType act = 2;
    AppChannelInfo channel = 3;
}

// AppCtrlResult - app control result
message AppCtrlResult {
    int64 ctrlID = 1;
    string token = 2;
    AppCtrlData ctrl = 3;
    int32 resultCode = 4;
}

// SCRResult - result for sendctrlresult
message SCRResult {
    int64 ctrlID = 1;
    int32 resultCode = 2;
}

// ChatBotService - ChatBot service
service ChatBotService {
    // registerAppService - register app service
    rpc registerAppService(RegisterAppService) returns (ReplyRegisterAppService) {}

    // sendChat - send chat
    rpc sendChat(stream ChatMsgStream) returns (stream ChatMsgStream) {}
    // requestChat - request chat
    rpc requestChat(RequestChatData) returns (stream ChatMsgStream) {}
    
    // requestCtrl - request control
    rpc requestCtrl(RequestCtrlData) returns (AppCtrlData) {}
    // sendCtrlResult - send control result
    rpc sendCtrlResult(AppCtrlResult) returns (SCRResult) {}
}

// ChatBotServInfo - ChatBot service infomation
message ChatBotServInfo {
    string token = 1;
    string sessionID = 2;
    string servName = 3;
}

// RegisterChatBotServ - register chatbot service
message RegisterChatBotServ {
    ChatBotServInfo servInfo = 1;
}

// ReplyRegisterChatBotServ - reply RegisterChatBotServ
message ReplyRegisterChatBotServ {
    string token = 1;
    string sessionID = 2;
    string error = 3;
}

// ChatBotUserService - ChatBot user service
service ChatBotUserService {
    // getUserInfo - register app service
    rpc registerChatBotServ(RegisterChatBotServ) returns (ReplyRegisterChatBotServ) {}
}